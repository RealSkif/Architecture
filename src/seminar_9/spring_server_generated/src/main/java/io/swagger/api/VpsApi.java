/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-08T15:31:50.629007628Z[GMT]")
@Validated
public interface VpsApi {

    @Operation(summary = "Updates a vps info with form data", description = "", tags={ "vps" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/vps/{vpsid}",
        method = RequestMethod.POST)
    ResponseEntity<Void> updateVpsWithForm(@Parameter(in = ParameterIn.PATH, description = "ID of vps that needs to be updated", required=true, schema=@Schema()) @PathVariable("vpsid") Long vpsid, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Amount of ram for vps" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ram", required = true) Long ram, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Amount of cpu for vps" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "cpu", required = true) Integer cpu, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Amount of storage for vps" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "storage", required = true) Long storage, @NotNull @Parameter(in = ParameterIn.QUERY, description = "os of vps" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "os", required = true) String os, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ip of vps" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ip", required = true) String ip);

}

