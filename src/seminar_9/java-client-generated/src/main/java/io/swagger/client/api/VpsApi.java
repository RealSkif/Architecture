/*
 * Cloud App API
 * Test api for Cloud App
 *
 * OpenAPI spec version: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VpsApi {
    private ApiClient apiClient;

    public VpsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VpsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for updateVpsWithForm
     * @param vpsid ID of vps that needs to be updated (required)
     * @param ram Amount of ram for vps (required)
     * @param cpu Amount of cpu for vps (required)
     * @param storage Amount of storage for vps (required)
     * @param os os of vps (required)
     * @param ip ip of vps (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVpsWithFormCall(Long vpsid, Long ram, Integer cpu, Long storage, String os, String ip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vps/{vpsid}"
            .replaceAll("\\{" + "vpsid" + "\\}", apiClient.escapeString(vpsid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ram != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ram", ram));
        if (cpu != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpu", cpu));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (os != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os", os));
        if (ip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip", ip));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVpsWithFormValidateBeforeCall(Long vpsid, Long ram, Integer cpu, Long storage, String os, String ip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vpsid' is set
        if (vpsid == null) {
            throw new ApiException("Missing the required parameter 'vpsid' when calling updateVpsWithForm(Async)");
        }
        // verify the required parameter 'ram' is set
        if (ram == null) {
            throw new ApiException("Missing the required parameter 'ram' when calling updateVpsWithForm(Async)");
        }
        // verify the required parameter 'cpu' is set
        if (cpu == null) {
            throw new ApiException("Missing the required parameter 'cpu' when calling updateVpsWithForm(Async)");
        }
        // verify the required parameter 'storage' is set
        if (storage == null) {
            throw new ApiException("Missing the required parameter 'storage' when calling updateVpsWithForm(Async)");
        }
        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling updateVpsWithForm(Async)");
        }
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling updateVpsWithForm(Async)");
        }
        
        com.squareup.okhttp.Call call = updateVpsWithFormCall(vpsid, ram, cpu, storage, os, ip, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a vps info with form data
     * 
     * @param vpsid ID of vps that needs to be updated (required)
     * @param ram Amount of ram for vps (required)
     * @param cpu Amount of cpu for vps (required)
     * @param storage Amount of storage for vps (required)
     * @param os os of vps (required)
     * @param ip ip of vps (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVpsWithForm(Long vpsid, Long ram, Integer cpu, Long storage, String os, String ip) throws ApiException {
        updateVpsWithFormWithHttpInfo(vpsid, ram, cpu, storage, os, ip);
    }

    /**
     * Updates a vps info with form data
     * 
     * @param vpsid ID of vps that needs to be updated (required)
     * @param ram Amount of ram for vps (required)
     * @param cpu Amount of cpu for vps (required)
     * @param storage Amount of storage for vps (required)
     * @param os os of vps (required)
     * @param ip ip of vps (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVpsWithFormWithHttpInfo(Long vpsid, Long ram, Integer cpu, Long storage, String os, String ip) throws ApiException {
        com.squareup.okhttp.Call call = updateVpsWithFormValidateBeforeCall(vpsid, ram, cpu, storage, os, ip, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a vps info with form data (asynchronously)
     * 
     * @param vpsid ID of vps that needs to be updated (required)
     * @param ram Amount of ram for vps (required)
     * @param cpu Amount of cpu for vps (required)
     * @param storage Amount of storage for vps (required)
     * @param os os of vps (required)
     * @param ip ip of vps (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVpsWithFormAsync(Long vpsid, Long ram, Integer cpu, Long storage, String os, String ip, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVpsWithFormValidateBeforeCall(vpsid, ram, cpu, storage, os, ip, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
